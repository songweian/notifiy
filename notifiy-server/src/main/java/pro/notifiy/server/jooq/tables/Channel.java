/*
 * This file is generated by jOOQ.
 */
package pro.notifiy.server.jooq.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import pro.notifiy.server.jooq.Keys;
import pro.notifiy.server.jooq.Notify;
import pro.notifiy.server.jooq.tables.records.ChannelRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Channel extends TableImpl<ChannelRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>notify.channel</code>
     */
    public static final Channel CHANNEL = new Channel();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ChannelRecord> getRecordType() {
        return ChannelRecord.class;
    }

    /**
     * The column <code>notify.channel.id</code>.
     */
    public final TableField<ChannelRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>notify.channel.app_id</code>.
     */
    public final TableField<ChannelRecord, String> APP_ID = createField(DSL.name("app_id"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>notify.channel.channel_code</code>.
     */
    public final TableField<ChannelRecord, String> CHANNEL_CODE = createField(DSL.name("channel_code"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>notify.channel.cloud_provider</code>.
     */
    public final TableField<ChannelRecord, String> CLOUD_PROVIDER = createField(DSL.name("cloud_provider"), SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>notify.channel.cloud_service</code>.
     */
    public final TableField<ChannelRecord, String> CLOUD_SERVICE = createField(DSL.name("cloud_service"), SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>notify.channel.cloud_app_id</code>.
     */
    public final TableField<ChannelRecord, String> CLOUD_APP_ID = createField(DSL.name("cloud_app_id"), SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>notify.channel.account_config</code>.
     */
    public final TableField<ChannelRecord, String> ACCOUNT_CONFIG = createField(DSL.name("account_config"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>notify.channel.create_time</code>.
     */
    public final TableField<ChannelRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("create_time"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>notify.channel.update_time</code>.
     */
    public final TableField<ChannelRecord, LocalDateTime> UPDATE_TIME = createField(DSL.name("update_time"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    private Channel(Name alias, Table<ChannelRecord> aliased) {
        this(alias, aliased, null);
    }

    private Channel(Name alias, Table<ChannelRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>notify.channel</code> table reference
     */
    public Channel(String alias) {
        this(DSL.name(alias), CHANNEL);
    }

    /**
     * Create an aliased <code>notify.channel</code> table reference
     */
    public Channel(Name alias) {
        this(alias, CHANNEL);
    }

    /**
     * Create a <code>notify.channel</code> table reference
     */
    public Channel() {
        this(DSL.name("channel"), null);
    }

    public <O extends Record> Channel(Table<O> child, ForeignKey<O, ChannelRecord> key) {
        super(child, key, CHANNEL);
    }

    @Override
    public Schema getSchema() {
        return Notify.NOTIFY;
    }

    @Override
    public Identity<ChannelRecord, Long> getIdentity() {
        return (Identity<ChannelRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<ChannelRecord> getPrimaryKey() {
        return Keys.KEY_CHANNEL_PRIMARY;
    }

    @Override
    public List<UniqueKey<ChannelRecord>> getKeys() {
        return Arrays.<UniqueKey<ChannelRecord>>asList(Keys.KEY_CHANNEL_PRIMARY);
    }

    @Override
    public Channel as(String alias) {
        return new Channel(DSL.name(alias), this);
    }

    @Override
    public Channel as(Name alias) {
        return new Channel(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Channel rename(String name) {
        return new Channel(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Channel rename(Name name) {
        return new Channel(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Long, String, String, String, String, String, String, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
