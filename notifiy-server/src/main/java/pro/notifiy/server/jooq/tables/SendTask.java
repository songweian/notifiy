/*
 * This file is generated by jOOQ.
 */
package pro.notifiy.server.jooq.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import pro.notifiy.server.jooq.Keys;
import pro.notifiy.server.jooq.Notify;
import pro.notifiy.server.jooq.tables.records.SendTaskRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SendTask extends TableImpl<SendTaskRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>notify.send_task</code>
     */
    public static final SendTask SEND_TASK = new SendTask();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SendTaskRecord> getRecordType() {
        return SendTaskRecord.class;
    }

    /**
     * The column <code>notify.send_task.id</code>.
     */
    public final TableField<SendTaskRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>notify.send_task.app_id</code>.
     */
    public final TableField<SendTaskRecord, String> APP_ID = createField(DSL.name("app_id"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>notify.send_task.task_id</code>.
     */
    public final TableField<SendTaskRecord, String> TASK_ID = createField(DSL.name("task_id"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>notify.send_task.batch_id</code>.
     */
    public final TableField<SendTaskRecord, String> BATCH_ID = createField(DSL.name("batch_id"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>notify.send_task.create_time</code>.
     */
    public final TableField<SendTaskRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("create_time"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>notify.send_task.update_time</code>.
     */
    public final TableField<SendTaskRecord, LocalDateTime> UPDATE_TIME = createField(DSL.name("update_time"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    private SendTask(Name alias, Table<SendTaskRecord> aliased) {
        this(alias, aliased, null);
    }

    private SendTask(Name alias, Table<SendTaskRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>notify.send_task</code> table reference
     */
    public SendTask(String alias) {
        this(DSL.name(alias), SEND_TASK);
    }

    /**
     * Create an aliased <code>notify.send_task</code> table reference
     */
    public SendTask(Name alias) {
        this(alias, SEND_TASK);
    }

    /**
     * Create a <code>notify.send_task</code> table reference
     */
    public SendTask() {
        this(DSL.name("send_task"), null);
    }

    public <O extends Record> SendTask(Table<O> child, ForeignKey<O, SendTaskRecord> key) {
        super(child, key, SEND_TASK);
    }

    @Override
    public Schema getSchema() {
        return Notify.NOTIFY;
    }

    @Override
    public Identity<SendTaskRecord, Long> getIdentity() {
        return (Identity<SendTaskRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<SendTaskRecord> getPrimaryKey() {
        return Keys.KEY_SEND_TASK_PRIMARY;
    }

    @Override
    public List<UniqueKey<SendTaskRecord>> getKeys() {
        return Arrays.<UniqueKey<SendTaskRecord>>asList(Keys.KEY_SEND_TASK_PRIMARY);
    }

    @Override
    public SendTask as(String alias) {
        return new SendTask(DSL.name(alias), this);
    }

    @Override
    public SendTask as(Name alias) {
        return new SendTask(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SendTask rename(String name) {
        return new SendTask(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SendTask rename(Name name) {
        return new SendTask(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, String, String, String, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
